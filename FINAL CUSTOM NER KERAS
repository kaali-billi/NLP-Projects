{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"FINAL CUSTOM NER KERAS","provenance":[{"file_id":"1Pae0Qshm0AxpgSabfZwry-ZWGLHl0V43","timestamp":1583745945548}],"collapsed_sections":[],"mount_file_id":"10LIFC9VAgsZu_Ta1Sn8nv17Z0TeGkifY","authorship_tag":"ABX9TyN3JAQRpzrKyLSrIPN/gv9O"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"gGFuV8tplKiO"},"source":["import numpy as np\n","import pandas as pd"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"qdLNu9JPlMj7"},"source":["df = pd.read_csv('/content/drive/My Drive/ner_dataset.csv', encoding = \"ISO-8859-1\", error_bad_lines=False)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZxMNx6Z-la9u","colab":{"base_uri":"https://localhost:8080/","height":419},"executionInfo":{"status":"ok","timestamp":1584590310418,"user_tz":-330,"elapsed":1587,"user":{"displayName":"Siddharth Singh","photoUrl":"","userId":"07697590641695933055"}},"outputId":"1989f0bf-80c2-4196-8890-1256329faed3"},"source":["df.head(500)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Sentence #</th>\n","      <th>Word</th>\n","      <th>POS</th>\n","      <th>Tag</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Sentence: 1</td>\n","      <td>Thousands</td>\n","      <td>NNS</td>\n","      <td>O</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>NaN</td>\n","      <td>of</td>\n","      <td>IN</td>\n","      <td>O</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>NaN</td>\n","      <td>demonstrators</td>\n","      <td>NNS</td>\n","      <td>O</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>NaN</td>\n","      <td>have</td>\n","      <td>VBP</td>\n","      <td>O</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>NaN</td>\n","      <td>marched</td>\n","      <td>VBN</td>\n","      <td>O</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>495</th>\n","      <td>Sentence: 22</td>\n","      <td>The</td>\n","      <td>DT</td>\n","      <td>O</td>\n","    </tr>\n","    <tr>\n","      <th>496</th>\n","      <td>NaN</td>\n","      <td>attacks</td>\n","      <td>NNS</td>\n","      <td>O</td>\n","    </tr>\n","    <tr>\n","      <th>497</th>\n","      <td>NaN</td>\n","      <td>occurred</td>\n","      <td>VBD</td>\n","      <td>O</td>\n","    </tr>\n","    <tr>\n","      <th>498</th>\n","      <td>NaN</td>\n","      <td>after</td>\n","      <td>IN</td>\n","      <td>O</td>\n","    </tr>\n","    <tr>\n","      <th>499</th>\n","      <td>NaN</td>\n","      <td>the</td>\n","      <td>DT</td>\n","      <td>O</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>500 rows Ã— 4 columns</p>\n","</div>"],"text/plain":["       Sentence #           Word  POS Tag\n","0     Sentence: 1      Thousands  NNS   O\n","1             NaN             of   IN   O\n","2             NaN  demonstrators  NNS   O\n","3             NaN           have  VBP   O\n","4             NaN        marched  VBN   O\n","..            ...            ...  ...  ..\n","495  Sentence: 22            The   DT   O\n","496           NaN        attacks  NNS   O\n","497           NaN       occurred  VBD   O\n","498           NaN          after   IN   O\n","499           NaN            the   DT   O\n","\n","[500 rows x 4 columns]"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"id":"H--52_CuldVJ","colab":{"base_uri":"https://localhost:8080/","height":221},"executionInfo":{"status":"ok","timestamp":1584590337446,"user_tz":-330,"elapsed":936,"user":{"displayName":"Siddharth Singh","photoUrl":"","userId":"07697590641695933055"}},"outputId":"e3652869-af79-4536-dff1-44306d5f269f"},"source":["df['Tag'].value_counts"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<bound method IndexOpsMixin.value_counts of 0          O\n","1          O\n","2          O\n","3          O\n","4          O\n","          ..\n","1048570    O\n","1048571    O\n","1048572    O\n","1048573    O\n","1048574    O\n","Name: Tag, Length: 1048575, dtype: object>"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"8uDkF2ynljL6"},"source":["class SentenceGetter(object):\n","    \n","    def __init__(self, dataset):\n","        self.n_sent = 1\n","        self.dataset = dataset\n","        self.empty = False\n","        agg_func = lambda s: [(w, t) for w,t in zip(s[\"Word\"].values.tolist(),\n","                                                        s[\"Tag\"].values.tolist())]\n","        self.grouped = self.dataset.groupby(\"Sentence #\").apply(agg_func)\n","        self.sentences = [s for s in self.grouped]\n","    \n","    def get_next(self):\n","        try:\n","            s = self.grouped[\"Sentence: {}\".format(self.n_sent)]\n","            self.n_sent += 1\n","            return s\n","        except:\n","            return None\n","          \n","getter = SentenceGetter(data)\n","sentences = getter.sentences"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"boP6nbH_lnhr"},"source":["from math import nan\n","\n","words = list(set(data[\"Word\"].values))\n","n_words = len(words)\n","\n","tags = []\n","for tag in set(data[\"Tag\"].values):\n","    if tag is nan or isinstance(tag, float):\n","        tags.append('unk')\n","    else:\n","        tags.append(tag)\n","n_tags = len(tags)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-RsabeLilxjh"},"source":["from future.utils import iteritems\n","\n","word2idx = {w: i for i, w in enumerate(words)}\n","tag2idx = {t: i for i, t in enumerate(tags)}\n","idx2tag = {v: k for k, v in iteritems(tag2idx)}\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3GzyVzzTmA-z","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1583744578607,"user_tz":-330,"elapsed":6862,"user":{"displayName":"Siddharth Singh","photoUrl":"","userId":"07697590641695933055"}},"outputId":"cfcdb3fa-7fbb-4963-d9c7-08ccc8c5d4b1"},"source":["n_tags"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["17"]},"metadata":{"tags":[]},"execution_count":38}]},{"cell_type":"code","metadata":{"id":"lDtQjdBxl4-j"},"source":["from keras.preprocessing.sequence import pad_sequences\n","from keras.utils import to_categorical\n","from sklearn.model_selection import train_test_split\n","\n","#maxlen = max([len(s) for s in sentences])\n","maxlen=140\n","X = [[word2idx[w[0]] for w in s] for s in sentences]\n","X = pad_sequences(maxlen=maxlen, sequences=X, padding=\"post\",value=n_words - 1)\n","\n","y = [[tag2idx[w[1]] for w in s] for s in sentences]\n","y = pad_sequences(maxlen=maxlen, sequences=y, padding=\"post\", value=tag2idx[\"O\"])\n","y = [to_categorical(i, num_classes=n_tags) for i in y]\n","\n","# Split train and test data\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"TQhUxnpIHY2m","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1583744579152,"user_tz":-330,"elapsed":6167,"user":{"displayName":"Siddharth Singh","photoUrl":"","userId":"07697590641695933055"}},"outputId":"2a00972b-9220-49d4-8508-d893e26b8808"},"source":["X.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(47959, 1)"]},"metadata":{"tags":[]},"execution_count":40}]},{"cell_type":"code","metadata":{"id":"ZvJ6ibdXmqUb","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1583745776014,"user_tz":-330,"elapsed":1273,"user":{"displayName":"Siddharth Singh","photoUrl":"","userId":"07697590641695933055"}},"outputId":"4b5e822c-ae06-43ed-d91e-69fc161d4738"},"source":["maxlen"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{"tags":[]},"execution_count":46}]},{"cell_type":"code","metadata":{"id":"3RYDP4nJl8eN","colab":{"base_uri":"https://localhost:8080/","height":343},"executionInfo":{"status":"ok","timestamp":1583744588245,"user_tz":-330,"elapsed":14698,"user":{"displayName":"Siddharth Singh","photoUrl":"","userId":"07697590641695933055"}},"outputId":"c499cc38-cce3-4972-8f04-3f43b34450d1"},"source":["!pip install git+https://www.github.com/keras-team/keras-contrib.git\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting git+https://www.github.com/keras-team/keras-contrib.git\n","  Cloning https://www.github.com/keras-team/keras-contrib.git to /tmp/pip-req-build-ldwic52u\n","  Running command git clone -q https://www.github.com/keras-team/keras-contrib.git /tmp/pip-req-build-ldwic52u\n","Requirement already satisfied (use --upgrade to upgrade): keras-contrib==2.0.8 from git+https://www.github.com/keras-team/keras-contrib.git in /usr/local/lib/python3.6/dist-packages\n","Requirement already satisfied: keras in /usr/local/lib/python3.6/dist-packages (from keras-contrib==2.0.8) (2.2.5)\n","Requirement already satisfied: keras-preprocessing>=1.1.0 in /usr/local/lib/python3.6/dist-packages (from keras->keras-contrib==2.0.8) (1.1.0)\n","Requirement already satisfied: keras-applications>=1.0.8 in /usr/local/lib/python3.6/dist-packages (from keras->keras-contrib==2.0.8) (1.0.8)\n","Requirement already satisfied: numpy>=1.9.1 in /usr/local/lib/python3.6/dist-packages (from keras->keras-contrib==2.0.8) (1.17.5)\n","Requirement already satisfied: h5py in /usr/local/lib/python3.6/dist-packages (from keras->keras-contrib==2.0.8) (2.8.0)\n","Requirement already satisfied: scipy>=0.14 in /usr/local/lib/python3.6/dist-packages (from keras->keras-contrib==2.0.8) (1.4.1)\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.6/dist-packages (from keras->keras-contrib==2.0.8) (3.13)\n","Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.6/dist-packages (from keras->keras-contrib==2.0.8) (1.12.0)\n","Building wheels for collected packages: keras-contrib\n","  Building wheel for keras-contrib (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for keras-contrib: filename=keras_contrib-2.0.8-cp36-none-any.whl size=101064 sha256=a2411d650a40444b2b9a6a54fe4466092aeb37ea7edd82467d601f602d1ed43c\n","  Stored in directory: /tmp/pip-ephem-wheel-cache-rsbv9wii/wheels/11/27/c8/4ed56de7b55f4f61244e2dc6ef3cdbaff2692527a2ce6502ba\n","Successfully built keras-contrib\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5GbVrdd5IFgz","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1583744588247,"user_tz":-330,"elapsed":13234,"user":{"displayName":"Siddharth Singh","photoUrl":"","userId":"07697590641695933055"}},"outputId":"cb861e94-444a-4704-f6b6-10350cbcebb6"},"source":["n_words"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["35178"]},"metadata":{"tags":[]},"execution_count":42}]},{"cell_type":"code","metadata":{"id":"0Voec-vTmISf"},"source":["from keras.models import Model, Input\n","from keras.layers import LSTM, Embedding, Dense, TimeDistributed, Dropout, Bidirectional\n","import keras as k\n","from keras_contrib.layers import CRF\n","\n","input = Input(shape=(140,))\n","word_embedding_size = 150\n","\n","# Embedding Layer\n","model = Embedding(input_dim=n_words, output_dim=word_embedding_size, input_length=140)(input)\n","\n","# BI-LSTM Layer\n","model = Bidirectional(LSTM(units=word_embedding_size, \n","                           return_sequences=True, \n","                           dropout=0.5, \n","                           recurrent_dropout=0.5, \n","                           kernel_initializer=k.initializers.he_normal()))(model)\n","model = LSTM(units=word_embedding_size * 2, \n","             return_sequences=True, \n","             dropout=0.5, \n","             recurrent_dropout=0.5, \n","             kernel_initializer=k.initializers.he_normal())(model)\n","\n","# TimeDistributed Layer\n","model = TimeDistributed(Dense(n_tags, activation=\"relu\"))(model)  \n","\n","# CRF Layer\n","crf = CRF(n_tags)\n","\n","out = crf(model)  # output\n","model = Model(input, out)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KbxRtcncmV03","colab":{"base_uri":"https://localhost:8080/","height":523},"executionInfo":{"status":"error","timestamp":1583669809174,"user_tz":-330,"elapsed":15673,"user":{"displayName":"Siddharth Singh","photoUrl":"","userId":"07697590641695933055"}},"outputId":"d54b14d4-0f47-46ea-e8d4-606d6506d46a"},"source":["from keras.callbacks import ModelCheckpoint\n","import matplotlib.pyplot as plt\n","\n","#Optimiser \n","adam = k.optimizers.Adam(lr=0.0005, beta_1=0.9, beta_2=0.999)\n","\n","# Compile model\n","model.compile(optimizer=adam, loss=crf.loss_function, metrics=[crf.accuracy, 'accuracy'])\n","\n","model.summary()\n","\n","# Saving the best model only\n","#filepath=\"/contentdrive/My Drive/ner-bi-lstm-td-model-{val_accuracy:.2f}.hdf5\"\n","#checkpoint = ModelCheckpoint(filepath, monitor='val_accuracy', verbose=1, save_best_only=True, mode='max')\n","#callbacks_list = [checkpoint]\n","\n","# Fit the best model\n","history = model.fit(X_train, np.array(y_train), batch_size=256, epochs=20, validation_split=0.1, verbose=1)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/keras_contrib/layers/crf.py:346: UserWarning: CRF.loss_function is deprecated and it might be removed in the future. Please use losses.crf_loss instead.\n","  warnings.warn('CRF.loss_function is deprecated '\n","/usr/local/lib/python3.6/dist-packages/keras_contrib/layers/crf.py:353: UserWarning: CRF.accuracy is deprecated and it might be removed in the future. Please use metrics.crf_accuracy\n","  warnings.warn('CRF.accuracy is deprecated and it '\n"],"name":"stderr"},{"output_type":"stream","text":["Model: \"model_4\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_6 (InputLayer)         (None, 140)               0         \n","_________________________________________________________________\n","embedding_6 (Embedding)      (None, 140, 150)          5276700   \n","_________________________________________________________________\n","bidirectional_4 (Bidirection (None, 140, 300)          361200    \n","_________________________________________________________________\n","lstm_8 (LSTM)                (None, 140, 300)          721200    \n","_________________________________________________________________\n","time_distributed_4 (TimeDist (None, 140, 17)           5117      \n","_________________________________________________________________\n","crf_4 (CRF)                  (None, 140, 17)           629       \n","=================================================================\n","Total params: 6,364,846\n","Trainable params: 6,364,846\n","Non-trainable params: 0\n","_________________________________________________________________\n","Train on 34530 samples, validate on 3837 samples\n","Epoch 1/20\n"," 3328/34530 [=>............................] - ETA: 19:10 - loss: 1.4377 - crf_viterbi_accuracy: 0.7305 - acc: 4.3140e-04"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5DC71kQ9FBQF","colab":{"base_uri":"https://localhost:8080/","height":217},"executionInfo":{"status":"ok","timestamp":1583738500347,"user_tz":-330,"elapsed":7728,"user":{"displayName":"Siddharth Singh","photoUrl":"","userId":"07697590641695933055"}},"outputId":"1af8e38f-3e9b-47b6-cdb3-a3010b5a11c4"},"source":["! pip install sklearn_crfsuite\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting sklearn_crfsuite\n","  Downloading https://files.pythonhosted.org/packages/25/74/5b7befa513482e6dee1f3dd68171a6c9dfc14c0eaa00f885ffeba54fe9b0/sklearn_crfsuite-0.3.6-py2.py3-none-any.whl\n","Requirement already satisfied: tabulate in /usr/local/lib/python3.6/dist-packages (from sklearn_crfsuite) (0.8.6)\n","Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from sklearn_crfsuite) (1.12.0)\n","Requirement already satisfied: tqdm>=2.0 in /usr/local/lib/python3.6/dist-packages (from sklearn_crfsuite) (4.28.1)\n","Collecting python-crfsuite>=0.8.3\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/2f/86/cfcd71edca9d25d3d331209a20f6314b6f3f134c29478f90559cee9ce091/python_crfsuite-0.9.6-cp36-cp36m-manylinux1_x86_64.whl (754kB)\n","\u001b[K     |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 757kB 4.2MB/s \n","\u001b[?25hInstalling collected packages: python-crfsuite, sklearn-crfsuite\n","Successfully installed python-crfsuite-0.9.6 sklearn-crfsuite-0.3.6\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Tqt7F0t6OCLu","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1583739321722,"user_tz":-330,"elapsed":3527,"user":{"displayName":"Siddharth Singh","photoUrl":"","userId":"07697590641695933055"}},"outputId":"c2c2306c-9582-4887-e29e-1783e5e1f0f6"},"source":["def pred2label(pred):\n","    out = []\n","    for pred_i in pred:\n","        out_i = []\n","        for p in pred_i:\n","            p_i = np.argmax(p)\n","            out_i.append(idx2tag[p_i])\n","        out.append(out_i)\n","    return out\n","test_pred = model.predict(X_test, verbose=1)   \n","pred_labels = pred2label(test_pred)\n","test_labels = pred2label(y_test)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["9592/9592 [==============================] - 2s 259us/step\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ddAYhNn_FGDF","colab":{"base_uri":"https://localhost:8080/","height":361},"executionInfo":{"status":"ok","timestamp":1583739325955,"user_tz":-330,"elapsed":1452,"user":{"displayName":"Siddharth Singh","photoUrl":"","userId":"07697590641695933055"}},"outputId":"5a4806c8-037b-449e-8619-dd790918c8b1"},"source":["from  sklearn_crfsuite.metrics import flat_classification_report  \n","report = flat_classification_report(y_pred=pred_labels, y_true=test_labels)\n","print(report)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","       B-art       0.00      0.00      0.00         3\n","       B-eve       0.00      0.00      0.00         2\n","       B-geo       0.73      0.89      0.80       650\n","       B-gpe       0.97      0.89      0.93       584\n","       B-nat       0.00      0.00      0.00         3\n","       B-org       0.38      0.59      0.46       548\n","       B-per       0.95      0.71      0.81       810\n","       B-tim       0.93      0.80      0.86        98\n","           O       0.98      0.96      0.97      6894\n","\n","    accuracy                           0.91      9592\n","   macro avg       0.55      0.54      0.54      9592\n","weighted avg       0.93      0.91      0.91      9592\n","\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"d2HrfDUGFItz"},"source":[""],"execution_count":null,"outputs":[]}]}